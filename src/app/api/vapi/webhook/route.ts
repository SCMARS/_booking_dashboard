import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    console.log('üîî Vapi webhook received:', JSON.stringify(body, null, 2));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –æ—Ç Vapi
    switch (body.type) {
      case 'call-started':
        console.log('üìû Call started:', {
          callId: body.call?.id,
          phoneNumber: body.call?.phoneNumber,
          assistantId: body.call?.assistantId,
          status: body.call?.status
        });
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ Server-Sent Events
        break;
        
      case 'call-ended':
        console.log('üìû Call ended:', {
          callId: body.call?.id,
          duration: body.call?.endedReason,
          status: body.call?.status,
          transcript: body.call?.transcript
        });
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–≤–æ–Ω–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        break;
        
      case 'function-call':
        console.log('‚öôÔ∏è Function call:', {
          callId: body.callId,
          functionName: body.functionCall?.functionName,
          parameters: body.functionCall?.parameters
        });
        break;
        
      case 'speech-update':
        console.log('üó£Ô∏è Speech update:', {
          callId: body.callId,
          message: body.speechUpdate?.message,
          role: body.speechUpdate?.role
        });
        break;
        
      case 'transcript':
        console.log('üìù Transcript:', {
          callId: body.callId,
          message: body.transcript?.message,
          role: body.transcript?.role
        });
        break;
        
      case 'message':
        console.log('üí¨ Message:', {
          callId: body.callId,
          message: body.message?.message,
          role: body.message?.role
        });
        break;
        
      default:
        console.log('‚ùì Unknown event type:', body.type, body);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`‚úÖ Processed webhook event: ${body.type}`);
    
    return NextResponse.json({ 
      success: true, 
      message: `Processed ${body.type} event`,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook
  return NextResponse.json({ 
    status: 'Webhook endpoint is active',
    timestamp: new Date().toISOString()
  });
}
