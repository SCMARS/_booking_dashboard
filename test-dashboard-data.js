const https = require('https');

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞
async function testDashboardData() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
  
  const baseUrl = 'http://localhost:8001/api/logs';
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤
  console.log('\nüìû –¢–µ—Å—Ç 1: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤');
  try {
    const response = await fetch(`${baseUrl}?type=call_summary&limit=100`);
    const data = await response.json();
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: ${data.logs.length}`);
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const endedReasons = data.logs.reduce((acc, log) => {
      const reason = log.endedReason || 'unknown';
      acc[reason] = (acc[reason] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìä –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:');
    Object.entries(endedReasons).forEach(([reason, count]) => {
      console.log(`  - ${reason}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
  console.log('\nüéØ –¢–µ—Å—Ç 2: –£—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏');
  try {
    const response = await fetch(`${baseUrl}?type=call_summary&limit=100`);
    const data = await response.json();
    const successfulCalls = data.logs.filter(log => 
      log.endedReason === 'customer-ended-call'
    );
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${successfulCalls.length}`);
    
    successfulCalls.forEach((call, index) => {
      console.log(`  ${index + 1}. Call ID: ${call.callId}`);
      console.log(`     –î–∞—Ç–∞: ${call.createdAt}`);
      console.log(`     –°—É–º–º–∞—Ä–∫–∞: ${call.summary?.substring(0, 100)}...`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏
  console.log('\nüìù –¢–µ—Å—Ç 3: –ó–≤–æ–Ω–∫–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏');
  try {
    const response = await fetch(`${baseUrl}?type=call_summary&limit=100`);
    const data = await response.json();
    const callsWithTranscript = data.logs.filter(log => log.transcript);
    console.log(`‚úÖ –ó–≤–æ–Ω–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏: ${callsWithTranscript.length}`);
    
    callsWithTranscript.forEach((call, index) => {
      console.log(`  ${index + 1}. Call ID: ${call.callId}`);
      console.log(`     –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: ${call.transcript.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`     –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: ${call.transcript.substring(0, 100)}...`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testDashboardData().catch(console.error);
